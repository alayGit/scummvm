//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.4
//
// <auto-generated>
//
// Generated from file `ScummHub.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace ScummVMSlices
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface ScummHubClient : global::Ice.Object, ScummHubClientOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface ScummHub : global::Ice.Object, ScummHubOperations_
    {
    }
}

namespace ScummVMSlices
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public delegate void Callback_ScummHubClient_SaveGame(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public delegate void Callback_ScummHubClient_BackEndQuit();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public delegate void Callback_ScummHub_addClient();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public delegate void Callback_ScummHub_RunGame();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public delegate void Callback_ScummHub_Quit();
}

namespace ScummVMSlices
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public interface ScummHubClientPrx : global::Ice.ObjectPrx
    {
        bool SaveGame(byte[] saveData, string fileName, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> SaveGameAsync(byte[] saveData, string fileName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_ScummHubClient_SaveGame> begin_SaveGame(byte[] saveData, string fileName, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_SaveGame(byte[] saveData, string fileName, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_SaveGame(byte[] saveData, string fileName, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_SaveGame(global::Ice.AsyncResult asyncResult);

        void BackEndQuit(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task BackEndQuitAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_ScummHubClient_BackEndQuit> begin_BackEndQuit(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_BackEndQuit(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_BackEndQuit(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_BackEndQuit(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public interface ScummHubPrx : global::Ice.ObjectPrx
    {
        void addClient(ScummHubClientPrx receiver, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task addClientAsync(ScummHubClientPrx receiver, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_ScummHub_addClient> begin_addClient(ScummHubClientPrx receiver, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_addClient(ScummHubClientPrx receiver, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_addClient(ScummHubClientPrx receiver, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_addClient(global::Ice.AsyncResult asyncResult);

        void RunGame(string gameName, global::System.Collections.Generic.Dictionary<string, byte[]> gameStorage, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task RunGameAsync(string gameName, global::System.Collections.Generic.Dictionary<string, byte[]> gameStorage, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_ScummHub_RunGame> begin_RunGame(string gameName, global::System.Collections.Generic.Dictionary<string, byte[]> gameStorage, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_RunGame(string gameName, global::System.Collections.Generic.Dictionary<string, byte[]> gameStorage, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_RunGame(string gameName, global::System.Collections.Generic.Dictionary<string, byte[]> gameStorage, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_RunGame(global::Ice.AsyncResult asyncResult);

        void Quit(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task QuitAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_ScummHub_Quit> begin_Quit(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_Quit(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_Quit(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_Quit(global::Ice.AsyncResult asyncResult);
    }
}

namespace ScummVMSlices
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public interface ScummHubClientOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
        global::System.Threading.Tasks.Task<bool> SaveGameAsync(byte[] saveData, string fileName, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
        global::System.Threading.Tasks.Task BackEndQuitAsync(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public interface ScummHubOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
        void addClient(ScummHubClientPrx receiver, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
        global::System.Threading.Tasks.Task RunGameAsync(string gameName, global::System.Collections.Generic.Dictionary<string, byte[]> gameStorage, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
        void Quit(global::Ice.Current current = null);
    }
}

namespace ScummVMSlices
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public sealed class GameDataHelper
    {
        public static void write(global::Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(global::Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public sealed class GameStorageHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, byte[]> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, byte[]> e in v)
                {
                    ostr.writeString(e.Key);
                    GameDataHelper.write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, byte[]> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, byte[]> r = new global::System.Collections.Generic.Dictionary<string, byte[]>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                byte[] v;
                v = GameDataHelper.read(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    [global::System.Serializable]
    public sealed class ScummHubClientPrxHelper : global::Ice.ObjectPrxHelperBase, ScummHubClientPrx
    {
        public ScummHubClientPrxHelper()
        {
        }

        public ScummHubClientPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public bool SaveGame(byte[] saveData, string fileName, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_SaveGameAsync(saveData, fileName, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void BackEndQuit(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_BackEndQuitAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<bool> SaveGameAsync(byte[] saveData, string fileName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_SaveGameAsync(saveData, fileName, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_SaveGameAsync(byte[] iceP_saveData, string iceP_fileName, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_SaveGame_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_SaveGame(iceP_saveData, iceP_fileName, context, synchronous, completed);
            return completed.Task;
        }

        private const string _SaveGame_name = "SaveGame";

        private void _iceI_SaveGame(byte[] iceP_saveData, string iceP_fileName, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _SaveGame_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    GameDataHelper.write(ostr, iceP_saveData);
                    ostr.writeString(iceP_fileName);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task BackEndQuitAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_BackEndQuitAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_BackEndQuitAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_BackEndQuit(context, synchronous, completed);
            return completed.Task;
        }

        private const string _BackEndQuit_name = "BackEndQuit";

        private void _iceI_BackEndQuit(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _BackEndQuit_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_ScummHubClient_SaveGame> begin_SaveGame(byte[] saveData, string fileName, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_SaveGame(saveData, fileName, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_SaveGame(byte[] saveData, string fileName, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_SaveGame(saveData, fileName, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_SaveGame(byte[] saveData, string fileName, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_SaveGame(saveData, fileName, context, callback, cookie, false);
        }

        public bool end_SaveGame(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _SaveGame_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ScummHubClient_SaveGame> begin_SaveGame(byte[] iceP_saveData, string iceP_fileName, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_SaveGame_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ScummHubClient_SaveGame, bool>(
                (Callback_ScummHubClient_SaveGame cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _SaveGame_name, cookie, completedCallback);
            _iceI_SaveGame(iceP_saveData, iceP_fileName, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_ScummHubClient_BackEndQuit> begin_BackEndQuit(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_BackEndQuit(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_BackEndQuit(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_BackEndQuit(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_BackEndQuit(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_BackEndQuit(context, callback, cookie, false);
        }

        public void end_BackEndQuit(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BackEndQuit_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ScummHubClient_BackEndQuit> begin_BackEndQuit(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ScummHubClient_BackEndQuit, object>(
                (Callback_ScummHubClient_BackEndQuit cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _BackEndQuit_name, cookie, completedCallback);
            _iceI_BackEndQuit(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static ScummHubClientPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ScummHubClientPrx r = b as ScummHubClientPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                ScummHubClientPrxHelper h = new ScummHubClientPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ScummHubClientPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ScummHubClientPrx r = b as ScummHubClientPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                ScummHubClientPrxHelper h = new ScummHubClientPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ScummHubClientPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    ScummHubClientPrxHelper h = new ScummHubClientPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ScummHubClientPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    ScummHubClientPrxHelper h = new ScummHubClientPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ScummHubClientPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ScummHubClientPrx r = b as ScummHubClientPrx;
            if(r == null)
            {
                ScummHubClientPrxHelper h = new ScummHubClientPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ScummHubClientPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            ScummHubClientPrxHelper h = new ScummHubClientPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::ScummVMSlices::ScummHubClient"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, ScummHubClientPrx v)
        {
            ostr.writeProxy(v);
        }

        public static ScummHubClientPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                ScummHubClientPrxHelper result = new ScummHubClientPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    [global::System.Serializable]
    public sealed class ScummHubPrxHelper : global::Ice.ObjectPrxHelperBase, ScummHubPrx
    {
        public ScummHubPrxHelper()
        {
        }

        public ScummHubPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void addClient(ScummHubClientPrx receiver, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_addClientAsync(receiver, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void RunGame(string gameName, global::System.Collections.Generic.Dictionary<string, byte[]> gameStorage, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_RunGameAsync(gameName, gameStorage, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void Quit(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_QuitAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task addClientAsync(ScummHubClientPrx receiver, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_addClientAsync(receiver, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_addClientAsync(ScummHubClientPrx iceP_receiver, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_addClient(iceP_receiver, context, synchronous, completed);
            return completed.Task;
        }

        private const string _addClient_name = "addClient";

        private void _iceI_addClient(ScummHubClientPrx iceP_receiver, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _addClient_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ScummHubClientPrxHelper.write(ostr, iceP_receiver);
                });
        }

        public global::System.Threading.Tasks.Task RunGameAsync(string gameName, global::System.Collections.Generic.Dictionary<string, byte[]> gameStorage, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_RunGameAsync(gameName, gameStorage, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_RunGameAsync(string iceP_gameName, global::System.Collections.Generic.Dictionary<string, byte[]> iceP_gameStorage, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_RunGame(iceP_gameName, iceP_gameStorage, context, synchronous, completed);
            return completed.Task;
        }

        private const string _RunGame_name = "RunGame";

        private void _iceI_RunGame(string iceP_gameName, global::System.Collections.Generic.Dictionary<string, byte[]> iceP_gameStorage, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _RunGame_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_gameName);
                    GameStorageHelper.write(ostr, iceP_gameStorage);
                });
        }

        public global::System.Threading.Tasks.Task QuitAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_QuitAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_QuitAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_Quit(context, synchronous, completed);
            return completed.Task;
        }

        private const string _Quit_name = "Quit";

        private void _iceI_Quit(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _Quit_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_ScummHub_addClient> begin_addClient(ScummHubClientPrx receiver, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_addClient(receiver, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_addClient(ScummHubClientPrx receiver, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_addClient(receiver, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_addClient(ScummHubClientPrx receiver, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_addClient(receiver, context, callback, cookie, false);
        }

        public void end_addClient(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _addClient_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ScummHub_addClient> begin_addClient(ScummHubClientPrx iceP_receiver, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ScummHub_addClient, object>(
                (Callback_ScummHub_addClient cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _addClient_name, cookie, completedCallback);
            _iceI_addClient(iceP_receiver, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_ScummHub_RunGame> begin_RunGame(string gameName, global::System.Collections.Generic.Dictionary<string, byte[]> gameStorage, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_RunGame(gameName, gameStorage, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_RunGame(string gameName, global::System.Collections.Generic.Dictionary<string, byte[]> gameStorage, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_RunGame(gameName, gameStorage, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_RunGame(string gameName, global::System.Collections.Generic.Dictionary<string, byte[]> gameStorage, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_RunGame(gameName, gameStorage, context, callback, cookie, false);
        }

        public void end_RunGame(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _RunGame_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ScummHub_RunGame> begin_RunGame(string iceP_gameName, global::System.Collections.Generic.Dictionary<string, byte[]> iceP_gameStorage, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ScummHub_RunGame, object>(
                (Callback_ScummHub_RunGame cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _RunGame_name, cookie, completedCallback);
            _iceI_RunGame(iceP_gameName, iceP_gameStorage, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_ScummHub_Quit> begin_Quit(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_Quit(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_Quit(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_Quit(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_Quit(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_Quit(context, callback, cookie, false);
        }

        public void end_Quit(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Quit_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ScummHub_Quit> begin_Quit(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ScummHub_Quit, object>(
                (Callback_ScummHub_Quit cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _Quit_name, cookie, completedCallback);
            _iceI_Quit(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static ScummHubPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ScummHubPrx r = b as ScummHubPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                ScummHubPrxHelper h = new ScummHubPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ScummHubPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ScummHubPrx r = b as ScummHubPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                ScummHubPrxHelper h = new ScummHubPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ScummHubPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    ScummHubPrxHelper h = new ScummHubPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ScummHubPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    ScummHubPrxHelper h = new ScummHubPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ScummHubPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ScummHubPrx r = b as ScummHubPrx;
            if(r == null)
            {
                ScummHubPrxHelper h = new ScummHubPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ScummHubPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            ScummHubPrxHelper h = new ScummHubPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::ScummVMSlices::ScummHub"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, ScummHubPrx v)
        {
            ostr.writeProxy(v);
        }

        public static ScummHubPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                ScummHubPrxHelper result = new ScummHubPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace ScummVMSlices
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public abstract class ScummHubClientDisp_ : global::Ice.ObjectImpl, ScummHubClient
    {
        #region Slice operations

        public abstract global::System.Threading.Tasks.Task<bool> SaveGameAsync(byte[] saveData, string fileName, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task BackEndQuitAsync(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::ScummVMSlices::ScummHubClient"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_SaveGame(ScummHubClient obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_saveData;
            string iceP_fileName;
            iceP_saveData = GameDataHelper.read(istr);
            iceP_fileName = istr.readString();
            inS.endReadParams();
            return inS.setResultTask<bool>(obj.SaveGameAsync(iceP_saveData, iceP_fileName, current),
                (ostr, ret) =>
                {
                    ostr.writeBool(ret);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_BackEndQuit(ScummHubClient obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            return inS.setResultTask(obj.BackEndQuitAsync(current));
        }

        private static readonly string[] _all =
        {
            "BackEndQuit",
            "SaveGame",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_BackEndQuit(this, inS, current);
                }
                case 1:
                {
                    return iceD_SaveGame(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public abstract class ScummHubDisp_ : global::Ice.ObjectImpl, ScummHub
    {
        #region Slice operations

        public abstract void addClient(ScummHubClientPrx receiver, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task RunGameAsync(string gameName, global::System.Collections.Generic.Dictionary<string, byte[]> gameStorage, global::Ice.Current current = null);

        public abstract void Quit(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::ScummVMSlices::ScummHub"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_addClient(ScummHub obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            ScummHubClientPrx iceP_receiver;
            iceP_receiver = ScummHubClientPrxHelper.read(istr);
            inS.endReadParams();
            obj.addClient(iceP_receiver, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_RunGame(ScummHub obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_gameName;
            global::System.Collections.Generic.Dictionary<string, byte[]> iceP_gameStorage;
            iceP_gameName = istr.readString();
            iceP_gameStorage = GameStorageHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask(obj.RunGameAsync(iceP_gameName, iceP_gameStorage, current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_Quit(ScummHub obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.Quit(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "Quit",
            "RunGame",
            "addClient",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_Quit(this, inS, current);
                }
                case 1:
                {
                    return iceD_RunGame(this, inS, current);
                }
                case 2:
                {
                    return iceD_addClient(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
