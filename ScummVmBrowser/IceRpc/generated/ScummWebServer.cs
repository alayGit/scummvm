//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.4
//
// <auto-generated>
//
// Generated from file `ScummWebServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace ScummWebsServerVMSlices
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface ScummWebServerClient : global::Ice.Object, ScummWebServerClientOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface ScummWebServer : global::Ice.Object, ScummWebServerOperations_
    {
    }
}

namespace ScummWebsServerVMSlices
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public delegate void Callback_ScummWebServerClient_SaveGame(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public delegate void Callback_ScummWebServer_addClient();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public delegate void Callback_ScummWebServer_Init();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public delegate void Callback_ScummWebServer_RunGame();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public delegate void Callback_ScummWebServer_Quit();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public delegate void Callback_ScummWebServer_GetControlKeys(string ret);
}

namespace ScummWebsServerVMSlices
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public interface ScummWebServerClientPrx : global::Ice.ObjectPrx
    {
        bool SaveGame(string saveData, string fileName, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> SaveGameAsync(string saveData, string fileName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_ScummWebServerClient_SaveGame> begin_SaveGame(string saveData, string fileName, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_SaveGame(string saveData, string fileName, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_SaveGame(string saveData, string fileName, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_SaveGame(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public interface ScummWebServerPrx : global::Ice.ObjectPrx
    {
        void addClient(ScummWebServerClientPrx receiver, string gameId, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task addClientAsync(ScummWebServerClientPrx receiver, string gameId, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_ScummWebServer_addClient> begin_addClient(ScummWebServerClientPrx receiver, string gameId, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_addClient(ScummWebServerClientPrx receiver, string gameId, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_addClient(ScummWebServerClientPrx receiver, string gameId, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_addClient(global::Ice.AsyncResult asyncResult);

        void Init(string gameId, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task InitAsync(string gameId, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_ScummWebServer_Init> begin_Init(string gameId, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_Init(string gameId, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_Init(string gameId, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_Init(global::Ice.AsyncResult asyncResult);

        void RunGame(string gameName, string signalrConnectionId, string saveStorageStr, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task RunGameAsync(string gameName, string signalrConnectionId, string saveStorageStr, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_ScummWebServer_RunGame> begin_RunGame(string gameName, string signalrConnectionId, string saveStorageStr, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_RunGame(string gameName, string signalrConnectionId, string saveStorageStr, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_RunGame(string gameName, string signalrConnectionId, string saveStorageStr, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_RunGame(global::Ice.AsyncResult asyncResult);

        void Quit(string signalrConnectionId, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task QuitAsync(string signalrConnectionId, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_ScummWebServer_Quit> begin_Quit(string signalrConnectionId, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_Quit(string signalrConnectionId, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_Quit(string signalrConnectionId, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_Quit(global::Ice.AsyncResult asyncResult);

        string GetControlKeys(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<string> GetControlKeysAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_ScummWebServer_GetControlKeys> begin_GetControlKeys(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_GetControlKeys(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_GetControlKeys(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        string end_GetControlKeys(global::Ice.AsyncResult asyncResult);
    }
}

namespace ScummWebsServerVMSlices
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public interface ScummWebServerClientOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
        global::System.Threading.Tasks.Task<bool> SaveGameAsync(string saveData, string fileName, global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public interface ScummWebServerOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
        void addClient(ScummWebServerClientPrx receiver, string gameId, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
        global::System.Threading.Tasks.Task InitAsync(string gameId, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
        global::System.Threading.Tasks.Task RunGameAsync(string gameName, string signalrConnectionId, string saveStorageStr, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
        global::System.Threading.Tasks.Task QuitAsync(string signalrConnectionId, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
        string GetControlKeys(global::Ice.Current current = null);
    }
}

namespace ScummWebsServerVMSlices
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public sealed class GameStorageHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, string> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, string> e in v)
                {
                    ostr.writeString(e.Key);
                    ostr.writeString(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, string> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, string> r = new global::System.Collections.Generic.Dictionary<string, string>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                string v;
                v = istr.readString();
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    [global::System.Serializable]
    public sealed class ScummWebServerClientPrxHelper : global::Ice.ObjectPrxHelperBase, ScummWebServerClientPrx
    {
        public ScummWebServerClientPrxHelper()
        {
        }

        public ScummWebServerClientPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public bool SaveGame(string saveData, string fileName, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_SaveGameAsync(saveData, fileName, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<bool> SaveGameAsync(string saveData, string fileName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_SaveGameAsync(saveData, fileName, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_SaveGameAsync(string iceP_saveData, string iceP_fileName, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_SaveGame_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_SaveGame(iceP_saveData, iceP_fileName, context, synchronous, completed);
            return completed.Task;
        }

        private const string _SaveGame_name = "SaveGame";

        private void _iceI_SaveGame(string iceP_saveData, string iceP_fileName, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _SaveGame_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_saveData);
                    ostr.writeString(iceP_fileName);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_ScummWebServerClient_SaveGame> begin_SaveGame(string saveData, string fileName, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_SaveGame(saveData, fileName, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_SaveGame(string saveData, string fileName, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_SaveGame(saveData, fileName, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_SaveGame(string saveData, string fileName, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_SaveGame(saveData, fileName, context, callback, cookie, false);
        }

        public bool end_SaveGame(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _SaveGame_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ScummWebServerClient_SaveGame> begin_SaveGame(string iceP_saveData, string iceP_fileName, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_SaveGame_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ScummWebServerClient_SaveGame, bool>(
                (Callback_ScummWebServerClient_SaveGame cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _SaveGame_name, cookie, completedCallback);
            _iceI_SaveGame(iceP_saveData, iceP_fileName, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static ScummWebServerClientPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ScummWebServerClientPrx r = b as ScummWebServerClientPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                ScummWebServerClientPrxHelper h = new ScummWebServerClientPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ScummWebServerClientPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ScummWebServerClientPrx r = b as ScummWebServerClientPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                ScummWebServerClientPrxHelper h = new ScummWebServerClientPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ScummWebServerClientPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    ScummWebServerClientPrxHelper h = new ScummWebServerClientPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ScummWebServerClientPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    ScummWebServerClientPrxHelper h = new ScummWebServerClientPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ScummWebServerClientPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ScummWebServerClientPrx r = b as ScummWebServerClientPrx;
            if(r == null)
            {
                ScummWebServerClientPrxHelper h = new ScummWebServerClientPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ScummWebServerClientPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            ScummWebServerClientPrxHelper h = new ScummWebServerClientPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::ScummWebsServerVMSlices::ScummWebServerClient"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, ScummWebServerClientPrx v)
        {
            ostr.writeProxy(v);
        }

        public static ScummWebServerClientPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                ScummWebServerClientPrxHelper result = new ScummWebServerClientPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    [global::System.Serializable]
    public sealed class ScummWebServerPrxHelper : global::Ice.ObjectPrxHelperBase, ScummWebServerPrx
    {
        public ScummWebServerPrxHelper()
        {
        }

        public ScummWebServerPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void addClient(ScummWebServerClientPrx receiver, string gameId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_addClientAsync(receiver, gameId, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void Init(string gameId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_InitAsync(gameId, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void RunGame(string gameName, string signalrConnectionId, string saveStorageStr, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_RunGameAsync(gameName, signalrConnectionId, saveStorageStr, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void Quit(string signalrConnectionId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_QuitAsync(signalrConnectionId, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string GetControlKeys(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetControlKeysAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task addClientAsync(ScummWebServerClientPrx receiver, string gameId, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_addClientAsync(receiver, gameId, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_addClientAsync(ScummWebServerClientPrx iceP_receiver, string iceP_gameId, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_addClient(iceP_receiver, iceP_gameId, context, synchronous, completed);
            return completed.Task;
        }

        private const string _addClient_name = "addClient";

        private void _iceI_addClient(ScummWebServerClientPrx iceP_receiver, string iceP_gameId, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _addClient_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ScummWebServerClientPrxHelper.write(ostr, iceP_receiver);
                    ostr.writeString(iceP_gameId);
                });
        }

        public global::System.Threading.Tasks.Task InitAsync(string gameId, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_InitAsync(gameId, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_InitAsync(string iceP_gameId, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_Init(iceP_gameId, context, synchronous, completed);
            return completed.Task;
        }

        private const string _Init_name = "Init";

        private void _iceI_Init(string iceP_gameId, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _Init_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_gameId);
                });
        }

        public global::System.Threading.Tasks.Task RunGameAsync(string gameName, string signalrConnectionId, string saveStorageStr, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_RunGameAsync(gameName, signalrConnectionId, saveStorageStr, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_RunGameAsync(string iceP_gameName, string iceP_signalrConnectionId, string iceP_saveStorageStr, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_RunGame(iceP_gameName, iceP_signalrConnectionId, iceP_saveStorageStr, context, synchronous, completed);
            return completed.Task;
        }

        private const string _RunGame_name = "RunGame";

        private void _iceI_RunGame(string iceP_gameName, string iceP_signalrConnectionId, string iceP_saveStorageStr, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _RunGame_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_gameName);
                    ostr.writeString(iceP_signalrConnectionId);
                    ostr.writeString(iceP_saveStorageStr);
                });
        }

        public global::System.Threading.Tasks.Task QuitAsync(string signalrConnectionId, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_QuitAsync(signalrConnectionId, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_QuitAsync(string iceP_signalrConnectionId, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_Quit(iceP_signalrConnectionId, context, synchronous, completed);
            return completed.Task;
        }

        private const string _Quit_name = "Quit";

        private void _iceI_Quit(string iceP_signalrConnectionId, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _Quit_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_signalrConnectionId);
                });
        }

        public global::System.Threading.Tasks.Task<string> GetControlKeysAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetControlKeysAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_GetControlKeysAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetControlKeys_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_GetControlKeys(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetControlKeys_name = "GetControlKeys";

        private void _iceI_GetControlKeys(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _GetControlKeys_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_ScummWebServer_addClient> begin_addClient(ScummWebServerClientPrx receiver, string gameId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_addClient(receiver, gameId, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_addClient(ScummWebServerClientPrx receiver, string gameId, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_addClient(receiver, gameId, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_addClient(ScummWebServerClientPrx receiver, string gameId, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_addClient(receiver, gameId, context, callback, cookie, false);
        }

        public void end_addClient(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _addClient_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ScummWebServer_addClient> begin_addClient(ScummWebServerClientPrx iceP_receiver, string iceP_gameId, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ScummWebServer_addClient, object>(
                (Callback_ScummWebServer_addClient cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _addClient_name, cookie, completedCallback);
            _iceI_addClient(iceP_receiver, iceP_gameId, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_ScummWebServer_Init> begin_Init(string gameId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_Init(gameId, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_Init(string gameId, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_Init(gameId, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_Init(string gameId, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_Init(gameId, context, callback, cookie, false);
        }

        public void end_Init(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Init_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ScummWebServer_Init> begin_Init(string iceP_gameId, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ScummWebServer_Init, object>(
                (Callback_ScummWebServer_Init cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _Init_name, cookie, completedCallback);
            _iceI_Init(iceP_gameId, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_ScummWebServer_RunGame> begin_RunGame(string gameName, string signalrConnectionId, string saveStorageStr, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_RunGame(gameName, signalrConnectionId, saveStorageStr, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_RunGame(string gameName, string signalrConnectionId, string saveStorageStr, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_RunGame(gameName, signalrConnectionId, saveStorageStr, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_RunGame(string gameName, string signalrConnectionId, string saveStorageStr, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_RunGame(gameName, signalrConnectionId, saveStorageStr, context, callback, cookie, false);
        }

        public void end_RunGame(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _RunGame_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ScummWebServer_RunGame> begin_RunGame(string iceP_gameName, string iceP_signalrConnectionId, string iceP_saveStorageStr, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ScummWebServer_RunGame, object>(
                (Callback_ScummWebServer_RunGame cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _RunGame_name, cookie, completedCallback);
            _iceI_RunGame(iceP_gameName, iceP_signalrConnectionId, iceP_saveStorageStr, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_ScummWebServer_Quit> begin_Quit(string signalrConnectionId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_Quit(signalrConnectionId, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_Quit(string signalrConnectionId, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_Quit(signalrConnectionId, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_Quit(string signalrConnectionId, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_Quit(signalrConnectionId, context, callback, cookie, false);
        }

        public void end_Quit(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Quit_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ScummWebServer_Quit> begin_Quit(string iceP_signalrConnectionId, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ScummWebServer_Quit, object>(
                (Callback_ScummWebServer_Quit cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _Quit_name, cookie, completedCallback);
            _iceI_Quit(iceP_signalrConnectionId, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_ScummWebServer_GetControlKeys> begin_GetControlKeys(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetControlKeys(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetControlKeys(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetControlKeys(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetControlKeys(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetControlKeys(context, callback, cookie, false);
        }

        public string end_GetControlKeys(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetControlKeys_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ScummWebServer_GetControlKeys> begin_GetControlKeys(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetControlKeys_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ScummWebServer_GetControlKeys, string>(
                (Callback_ScummWebServer_GetControlKeys cb, string ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetControlKeys_name, cookie, completedCallback);
            _iceI_GetControlKeys(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static ScummWebServerPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ScummWebServerPrx r = b as ScummWebServerPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                ScummWebServerPrxHelper h = new ScummWebServerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ScummWebServerPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ScummWebServerPrx r = b as ScummWebServerPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                ScummWebServerPrxHelper h = new ScummWebServerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ScummWebServerPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    ScummWebServerPrxHelper h = new ScummWebServerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ScummWebServerPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    ScummWebServerPrxHelper h = new ScummWebServerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ScummWebServerPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ScummWebServerPrx r = b as ScummWebServerPrx;
            if(r == null)
            {
                ScummWebServerPrxHelper h = new ScummWebServerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ScummWebServerPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            ScummWebServerPrxHelper h = new ScummWebServerPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::ScummWebsServerVMSlices::ScummWebServer"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, ScummWebServerPrx v)
        {
            ostr.writeProxy(v);
        }

        public static ScummWebServerPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                ScummWebServerPrxHelper result = new ScummWebServerPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace ScummWebsServerVMSlices
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public abstract class ScummWebServerClientDisp_ : global::Ice.ObjectImpl, ScummWebServerClient
    {
        #region Slice operations

        public abstract global::System.Threading.Tasks.Task<bool> SaveGameAsync(string saveData, string fileName, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::ScummWebsServerVMSlices::ScummWebServerClient"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_SaveGame(ScummWebServerClient obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_saveData;
            string iceP_fileName;
            iceP_saveData = istr.readString();
            iceP_fileName = istr.readString();
            inS.endReadParams();
            return inS.setResultTask<bool>(obj.SaveGameAsync(iceP_saveData, iceP_fileName, current),
                (ostr, ret) =>
                {
                    ostr.writeBool(ret);
                });
        }

        private static readonly string[] _all =
        {
            "SaveGame",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_SaveGame(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.4")]
    public abstract class ScummWebServerDisp_ : global::Ice.ObjectImpl, ScummWebServer
    {
        #region Slice operations

        public abstract void addClient(ScummWebServerClientPrx receiver, string gameId, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task InitAsync(string gameId, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task RunGameAsync(string gameName, string signalrConnectionId, string saveStorageStr, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task QuitAsync(string signalrConnectionId, global::Ice.Current current = null);

        public abstract string GetControlKeys(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::ScummWebsServerVMSlices::ScummWebServer"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_addClient(ScummWebServer obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            ScummWebServerClientPrx iceP_receiver;
            string iceP_gameId;
            iceP_receiver = ScummWebServerClientPrxHelper.read(istr);
            iceP_gameId = istr.readString();
            inS.endReadParams();
            obj.addClient(iceP_receiver, iceP_gameId, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_Init(ScummWebServer obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_gameId;
            iceP_gameId = istr.readString();
            inS.endReadParams();
            return inS.setResultTask(obj.InitAsync(iceP_gameId, current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_RunGame(ScummWebServer obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_gameName;
            string iceP_signalrConnectionId;
            string iceP_saveStorageStr;
            iceP_gameName = istr.readString();
            iceP_signalrConnectionId = istr.readString();
            iceP_saveStorageStr = istr.readString();
            inS.endReadParams();
            return inS.setResultTask(obj.RunGameAsync(iceP_gameName, iceP_signalrConnectionId, iceP_saveStorageStr, current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_Quit(ScummWebServer obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_signalrConnectionId;
            iceP_signalrConnectionId = istr.readString();
            inS.endReadParams();
            return inS.setResultTask(obj.QuitAsync(iceP_signalrConnectionId, current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_GetControlKeys(ScummWebServer obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.GetControlKeys(current);
            var ostr = inS.startWriteParams();
            ostr.writeString(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "GetControlKeys",
            "Init",
            "Quit",
            "RunGame",
            "addClient",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_GetControlKeys(this, inS, current);
                }
                case 1:
                {
                    return iceD_Init(this, inS, current);
                }
                case 2:
                {
                    return iceD_Quit(this, inS, current);
                }
                case 3:
                {
                    return iceD_RunGame(this, inS, current);
                }
                case 4:
                {
                    return iceD_addClient(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 8:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
